/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Gui;

import panels.plant_transformer_breaker_component.ChoosingPanel;
import DB_connection.FixValues;
import DB_connection.DBConnection;
import ExcelComponents.ExcelFileOpener;
import com.mysql.jdbc.PreparedStatement;
import ExcelComponents.ExcelSheetOpener;
import ExcelComponents.Fileopener;
import DB_data_loader.data_classes.Breaker;
import exceptions.BadDateInputException;
import exceptions.BadTimeInputException;
import exceptions.NoSuchSheetException;
import exceptions.ErrorPopup;
import exceptions.NoFileSelectedException;
import exceptions.badfileexception;
import java.io.File;
import java.io.FileNotFoundException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Paris
 */
public class LoadExcelDataGui extends javax.swing.JFrame {

    /**
     * Creates new form LoadExcelDataGui
     */
    DBConnection dbconn;
    ChoosingPanel cp;
    File excelfile;
    ExcelSheetOpener sheet;

    public LoadExcelDataGui(DBConnection dbconn) {
        this.dbconn = dbconn;
        initComponents();
        cp = new ChoosingPanel();
        cp.setVisible(true);
        add(cp);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        sample_data_table = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        load_excel_file = new javax.swing.JButton();
        sheet_number_spinner = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        pass_data_to_DB_button = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new java.awt.BorderLayout());

        sample_data_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(sample_data_table);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jLabel1.setText("Sample Data");

        load_excel_file.setText("Open File");
        load_excel_file.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                load_excel_fileActionPerformed(evt);
            }
        });

        sheet_number_spinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sheet_number_spinnerStateChanged(evt);
            }
        });

        jLabel2.setText("Sheet Number");

        pass_data_to_DB_button.setText("Pass to DB");
        pass_data_to_DB_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pass_data_to_DB_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(34, 336, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(load_excel_file, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(sheet_number_spinner, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                    .addComponent(pass_data_to_DB_button, javax.swing.GroupLayout.Alignment.TRAILING)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(load_excel_file)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sheet_number_spinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 67, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pass_data_to_DB_button, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
void load_temp_data() {

        if (sheet.data_x_y != null) {
            String columnnames[] = new String[2];
            for (int i = 1; i < 3; i++) {
                columnnames[i - 1] = sheet.data_x_y[i][0];
            }

            String[][] data = new String[Math.min(10, sheet.max_row)][2];

            for (int x = 1; x < 3; x++) {
                for (int y = 1; y < Math.min(11, sheet.max_row + 1); y++) {
                    data[y - 1][x - 1] = sheet.data_x_y[x][y];
                }
            }

            DefaultTableModel dtb = new DefaultTableModel(data, columnnames);
            sample_data_table.setModel(dtb);
            revalidate();
        }
    }

    private void load_excel_fileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_load_excel_fileActionPerformed
        try {
            try {
                excelfile = ExcelFileOpener.open_excel_file();
            } catch (badfileexception ex) {
                return;
            }
        } catch (NoFileSelectedException ex) {
            return;
        }
        try {
            sheet = new ExcelSheetOpener(0, excelfile);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(LoadExcelDataGui.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchSheetException ex) {
            Logger.getLogger(LoadExcelDataGui.class.getName()).log(Level.SEVERE, null, ex);
        }
        load_temp_data();

    }//GEN-LAST:event_load_excel_fileActionPerformed

    private void pass_data_to_DB_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pass_data_to_DB_buttonActionPerformed

        pass_data_to_breaker();


    }//GEN-LAST:event_pass_data_to_DB_buttonActionPerformed

    private void sheet_number_spinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sheet_number_spinnerStateChanged
        if ((int) sheet_number_spinner.getValue() < 0 || excelfile == null) {
            sheet_number_spinner.setValue(0);
        } else {
            try {
                sheet = new ExcelSheetOpener((int) sheet_number_spinner.getValue(), excelfile);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(LoadExcelDataGui.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoSuchSheetException ex) {
                Logger.getLogger(LoadExcelDataGui.class.getName()).log(Level.SEVERE, null, ex);
            }
            load_temp_data();

        }
    }//GEN-LAST:event_sheet_number_spinnerStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton load_excel_file;
    private javax.swing.JButton pass_data_to_DB_button;
    private javax.swing.JTable sample_data_table;
    private javax.swing.JSpinner sheet_number_spinner;
    // End of variables declaration//GEN-END:variables

    private void pass_data_to_breaker() {

        int errors = 0;
        boolean fatalerror = false;
        try {
            dbconn.disablekeys("breaker_data");
            Statement stmt = dbconn.conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Breaker b = (Breaker) cp.breaker_combobox.getSelectedItem();
            for (int i = 1; i < sheet.max_row; i++) {
                try {
                    String query = " INSERT INTO breaker_data VALUES (" + "'" + FixValues.reversedate(sheet.data_x_y[1][i], '/', ':')
                            + "'" + "," + sheet.data_x_y[2][i].replace(',', '.')
                            + "," + b.id + ");\n";

                    stmt.executeUpdate(query);

                } catch (BadDateInputException ex) {
                    System.out.println("Bad date format in Excel at row : " + i);
                    errors++;
                } catch (BadTimeInputException ex) {
                    System.out.println("Bad time format in Excel at row : " + i);
                    errors++;
                }
            }

            dbconn.enablekeys("breaker_data");
        } catch (SQLException ex) {
            try {
                dbconn.enablekeys("breaker_data");

            } catch (SQLException ex1) {
                Logger.getLogger(MainWindow.class
                        .getName()).log(Level.SEVERE, null, ex1);
            }
            fatalerror = true;
            System.out.println("query error at loadexceldatagui");
            System.out.println(ex.getMessage());
        }
        if (fatalerror == false) {
            System.out.println("querycompleted sucesfully");
            System.out.println("errrors #" + errors);
        }
    }
}
