/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Gui;

import panels.plant_transformer_breaker_component.ChoosingPanel;
import panels.Analytics.GraphPanel;
import DB_connection.DBConnection;
import DB_data_loader.LoadDataFromDB;
import DB_data_loader.data_classes.ElectricalValue;
import Reports.ReportPanel;
import exceptions.BadDateInputException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.util.Vector;
import org.joda.time.DateTime;
import org.joda.time.LocalDate;
import panels.condence_panel.CondencePanel;
import panels.date_panel.DatePanel;
import panels.smoothing_panel.SmoothingPanel;

/**
 *
 * @author Paris
 */
public class AnalyticsGui extends javax.swing.JFrame {

    /**
     * Creates new form AnalyticsGui
     */
    DBConnection dbconn;
    ChoosingPanel choosing_panel = new ChoosingPanel();
    DatePanel date_panel = new DatePanel();
    CondencePanel condence_panel = new CondencePanel();
    SmoothingPanel smoothing_panel = new SmoothingPanel();
    Vector<ElectricalValue> data;

    public AnalyticsGui(DBConnection dbconn) {
        this.dbconn = dbconn;
        add(choosing_panel);
        add(date_panel);
        add(condence_panel);
        add(smoothing_panel);
        smoothing_panel.setLocation(0, 200);
        condence_panel.setLocation(0, 300);
        choosing_panel.setLocation(600, 0);

        initComponents();
        setSize(getPreferredSize());
        choosing_panel.addChangeListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                queryfornewdata();
            }
        });
        date_panel.addChangeListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                queryfornewdata();
            }
        });

        condence_panel.addChangeListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                remakegraph(modify_data(data));
            }
        });
        smoothing_panel.addChangeListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                remakegraph(modify_data(data));
            }
        });


        queryfornewdata();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(400, 400));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1200, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 701, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
    GraphPanel graph_panel = null;
    ReportPanel rp = null;

    private Vector<ElectricalValue> modify_data(Vector<ElectricalValue> olddata) {
        int condence = condence_panel.condence_value;
        if (condence != 1) {
            Vector<ElectricalValue> modifieddata = new Vector<ElectricalValue>();
            if (condence_panel.sum_radio_button.isSelected()) {
                int j = 0;
                for (int i = 0; i < olddata.size(); i += j) {
                    DateTime start = olddata.get(i).datetime;
                    double avg = 0;
                    j = 0;
                    while ((i + j) < olddata.size() && condence_panel.is_inside_period(start, olddata.get(i + j).datetime)) {

                        avg += olddata.get(i + j).value;
                        j++;
                    }
                    modifieddata.add(new ElectricalValue(olddata.get((int) i + (j - 1) / 2).datetime, (float) (avg)));
                }

            } else if (condence_panel.average_radio_button.isSelected()) {
                int j = 0;
                for (int i = 0; i < olddata.size(); i += j) {
                    DateTime start = olddata.get(i).datetime;
                    double avg = 0;
                    j = 0;
                    while ((i + j) < olddata.size() && condence_panel.is_inside_period(start, olddata.get(i + j).datetime)) {

                        avg += olddata.get(i + j).value;
                        j++;
                    }
                    modifieddata.add(new ElectricalValue(olddata.get((int) i + (j - 1) / 2).datetime, (float) (avg / j)));
                }
            }
            return modifieddata;
        }
        return olddata;
    }

    private void queryfornewdata() {
        data = LoadDataFromDB.get_breaker_data(choosing_panel.selected_breaker, date_panel.startdate, date_panel.enddate);

        remakegraph(modify_data(data));
        if (rp != null) {
            remove(rp);
        }
        rp = new ReportPanel(data);
        rp.setLocation(0, 500);
        add(rp);

    }

    private void remakegraph(Vector<ElectricalValue> data) {
        if (graph_panel != null) {
            remove(graph_panel);
        }
        graph_panel = new GraphPanel(data, smoothing_panel.jSlider1.getValue());
        
        add(graph_panel);
        graph_panel.setSize(graph_panel.getPreferredSize());
        graph_panel.setLocation(400, 80);
        revalidate();
    }
}
